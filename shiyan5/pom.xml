<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>CounterWebApp</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>CounterWebApp Maven Webapp</name>
    <url>http://maven.apache.org</url>

    <properties>
        <!-- Set default encoding -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Set compiler version -->
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.source>1.8</maven.compiler.source>

        <spring.version>5.1.6.RELEASE</spring.version>
        <jstl.version>1.2</jstl.version>
        <junit.version>4.12</junit.version>
        <logback.version>1.0.13</logback.version>
        <jcl-over-slf4j.version>1.7.5</jcl-over-slf4j.version>
    </properties>

    <dependencies>
        <!-- Unit Test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Spring Core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${jcl-over-slf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- jstl -->
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl.version}</version>
        </dependency>
    </dependencies>

    <build>
        <finalName>CounterWebApp</finalName>

        <plugins>
            <!-- Apache Maven Eclipse Plugin (RETIRED)
            The Maven Eclipse Plugin is used to generate Eclipse IDE files (*.classpath, *.project, 
            *.wtpmodules and the .settings folder) for use with a project.
            Disclaimer: Users are advised to use m2e
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-eclipse-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <!-- Always download and attach dependencies source code -->
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>false</downloadJavadocs>
                    <!-- Avoid type mvn eclipse:eclipse -Dwtpversion=2.0 -->
                    <wtpversion>2.0</wtpversion>
                </configuration>
            </plugin>

            <!-- Apache Maven Resources Plugin
            The Resources Plugin handles the copying of project resources to the output directory. 
            There are two different kinds of resources: main resources and test resources. 
            The difference is that the main resources are the resources associated to the main 
            source code while the test resources are associated to the test source code.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/ 
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <goals>
                            <goal>resources</goal>
                            <goal>testResources</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Apache Maven Site Plugin
            The Site Plugin is used to generate a site for the project. The generated site also 
            includes the project's reports that were configured in the POM.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-site-plugin/ 
            -->
            <!-- Note.
            To fix "mvn site" error "NoClassDefFoundError: org/apache/maven/doxia/siterenderer/DocumentContent" problem.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.7.1</version>
            </plugin>

            <!-- Tomcat Maven Plugin
            It provides goals to manipulate WAR projects within the Tomcat servlet container version 7.x
            https://repo.maven.apache.org/maven2/org/apache/tomcat/maven/tomcat7-maven-plugin/
            -->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <server>TomcatServer</server>
                    <path>/CounterWebApp</path>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <!-- Apache Maven Project Info Reports Plugin
            The Maven Project Info Reports plugin is used to generate reports information about the project.
            Normally, we take off the dependency report to save time.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-project-info-reports-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>

            <!-- Apache Maven Javadoc Plugin. 
            The Javadoc Plugin uses the Javadoc tool to generate javadocs for the specified project. 
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-javadoc-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>

            <!-- Maven JXR Plugin. 
            The JXR Plugin produces a cross-reference of the project's sources. 
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jxr-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>

            <!-- Apache Maven PMD Plugin. 
            The PMD Plugin allows you to automatically run the PMD code analysis tool on your project's 
            source code and generate a site report with its results. 
            It also supports the separate Copy/Paste Detector tool (or CPD) distributed with PMD.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-pmd-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.12.0</version>
                <configuration>
                    <skipEmptyReport>false</skipEmptyReport>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
</project>
